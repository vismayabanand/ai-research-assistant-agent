# main.py
import argparse
from src.agent import app # Import the compiled graph
from src.rag_qa import answer_query

def main():
    parser = argparse.ArgumentParser(description="AI Research Assistant Agent")
    parser.add_argument("query", help="Topic to search for")
    parser.add_argument("--source", choices=["arxiv", "semantic"], default="arxiv",
                        help="Which source to fetch papers from.")
    args = parser.parse_args()

    # Define the initial state to start the graph
    initial_state = {"query": args.query, "source": args.source}
    
    # Invoke the graph. It will run through all the steps.
    final_state = app.invoke(initial_state)

    # After the graph finishes, we can use the final state
    rag_collection = final_state.get("rag_collection")
    reading_plan = final_state.get("reading_plan")

    if not rag_collection or not reading_plan:
        print("\nWorkflow ended prematurely. No results to display.")
        return

    print("\n\n" + "="*50)
    print("=== Reading Plan (Generated by AI) ===")
    for idx, paper in enumerate(reading_plan, 1):
        print(f"{idx}. {paper.get('title', 'Untitled')}")
    print("="*50)


    print("\nDatabase ready. Enter questions about these papers (type 'exit' to quit):")
    while True:
        q = input("Q: ").strip()
        if q.lower() in ('exit', 'quit'):
            break
        if not q:
            continue
        
        # Use the RAG collection from the final state to answer questions
        ans = answer_query(rag_collection, q)
        print(f"A: {ans}\n")

if __name__ == "__main__":
    main()